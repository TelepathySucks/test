<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>Rhythm Game</title>
    <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700&display=swap" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tone/14.7.77/Tone.js"></script>
    <style>
        :root {
            --bg-color: #12121c;
            --note-color-1: #00f2ff;
            --note-color-2: #ff00e5;
            --note-color-3: #00ff85;
            --note-color-4: #fffb00;
            --hit-line-color: #ffffff;
            --text-color: #f0f0f0;
            --perfect-color: #00ffdd;
            --good-color: #39ff00;
            --miss-color: #ff4d4d;
            --particle-color: #ffffff;
        }

        body, html {
            margin: 0;
            padding: 0;
            width: 100%;
            height: 100%;
            overflow: hidden;
            background-color: var(--bg-color);
            font-family: 'Orbitron', sans-serif;
            color: var(--text-color);
            user-select: none;
            -webkit-user-select: none;
            -webkit-tap-highlight-color: transparent;
        }

        #game-container {
            position: relative;
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
        }

        #main-menu, #results-screen, #loading-screen {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(18, 18, 28, 0.98);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            text-align: center;
            z-index: 100;
        }

        .hidden {
            display: none !important;
        }
        
        h1 {
            font-size: 3rem;
            color: var(--hit-line-color);
            text-shadow: 0 0 15px var(--note-color-1), 0 0 25px var(--note-color-2);
            margin-bottom: 2rem;
        }

        #song-selection h2, #results-screen h2, #loading-screen h2 {
            font-size: 2rem;
            margin-bottom: 1.5rem;
        }

        .song-item, .difficulty-button, .menu-button {
            background: linear-gradient(145deg, #1e1e2f, #141420);
            border: 2px solid var(--note-color-3);
            border-radius: 15px;
            padding: 15px 30px;
            margin: 10px;
            font-size: 1.2rem;
            color: var(--text-color);
            cursor: pointer;
            transition: all 0.2s ease-in-out;
            box-shadow: 0 0 10px rgba(0, 255, 133, 0.5);
        }

        .song-item:hover, .difficulty-button:hover, .menu-button:hover {
            transform: scale(1.05);
            box-shadow: 0 0 20px rgba(0, 255, 133, 0.8);
        }

        #playfield {
            position: relative;
            width: 100%;
            max-width: 500px;
            height: 100%;
            background: linear-gradient(to top, rgba(18, 18, 28, 1) 0%, rgba(18, 18, 28, 0) 100%);
            overflow: hidden;
        }

        .lane {
            position: absolute;
            bottom: 0;
            height: 100%;
            width: 25%;
            border-left: 1px solid rgba(255, 255, 255, 0.1);
        }
        .lane:last-child {
            border-right: 1px solid rgba(255, 255, 255, 0.1);
        }
        .lane:nth-child(1) { left: 0; }
        .lane:nth-child(2) { left: 25%; }
        .lane:nth-child(3) { left: 50%; }
        .lane:nth-child(4) { left: 75%; }

        .note {
            position: absolute;
            width: 90%;
            left: 5%;
            height: 20px;
            border-radius: 8px;
            will-change: transform;
            z-index: 5;
        }
        
        .note-trail {
            position: absolute;
            width: 80%;
            left: 10%;
            border-radius: 8px;
            transform-origin: top;
            will-change: transform;
            z-index: 4;
        }

        .note.lane1, .note-trail.lane1 { background-color: var(--note-color-1); box-shadow: 0 0 15px var(--note-color-1); }
        .note.lane2, .note-trail.lane2 { background-color: var(--note-color-2); box-shadow: 0 0 15px var(--note-color-2); }
        .note.lane3, .note-trail.lane3 { background-color: var(--note-color-3); box-shadow: 0 0 15px var(--note-color-3); }
        .note.lane4, .note-trail.lane4 { background-color: var(--note-color-4); box-shadow: 0 0 15px var(--note-color-4); }

        #hit-area {
            position: absolute;
            bottom: 0;
            width: 100%;
            height: 15%;
            display: flex;
            z-index: 20;
        }
        
        #hit-line {
            position: absolute;
            bottom: 15%;
            width: 100%;
            height: 5px;
            background-color: var(--hit-line-color);
            box-shadow: 0 0 15px var(--hit-line-color);
            transition: transform 0.05s ease;
            z-index: 10;
        }

        .hit-button {
            flex-grow: 1;
            border: none;
            background-color: rgba(255, 255, 255, 0.1);
            transition: background-color 0.05s ease;
            border-top: 2px solid rgba(255, 255, 255, 0.3);
            border-radius: 10px 10px 0 0;
            margin: 0 2px;
        }

        .hit-button.active {
            background-color: rgba(255, 255, 255, 0.4);
        }
        .hit-button:nth-child(1).active { box-shadow: inset 0 0 20px var(--note-color-1); }
        .hit-button:nth-child(2).active { box-shadow: inset 0 0 20px var(--note-color-2); }
        .hit-button:nth-child(3).active { box-shadow: inset 0 0 20px var(--note-color-3); }
        .hit-button:nth-child(4).active { box-shadow: inset 0 0 20px var(--note-color-4); }

        #hud {
            position: absolute;
            top: 20px;
            width: 100%;
            display: flex;
            justify-content: space-around;
            font-size: 1.5rem;
            text-shadow: 0 0 5px black;
            z-index: 10;
        }

        #combo-display, #score-display {
            transition: transform 0.1s ease;
        }

        #judgement-display {
            position: absolute;
            top: 40%;
            left: 50%;
            transform: translateX(-50%);
            font-size: 2.5rem;
            font-weight: bold;
            opacity: 0;
            transition: all 0.1s ease-out;
            will-change: opacity, transform;
            pointer-events: none;
            z-index: 50;
        }
        
        .particle {
            position: absolute;
            background-color: var(--particle-color);
            border-radius: 50%;
            pointer-events: none;
            opacity: 1;
            will-change: transform, opacity;
            z-index: 40;
        }

        #results-details {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px 40px;
            font-size: 1.2rem;
            margin: 20px 0;
        }
        .result-label { text-align: right; font-weight: bold; }
        .result-value { text-align: left; }
    </style>
</head>
<body>
    <div id="game-container">
        <!-- Loading Screen -->
        <div id="loading-screen" class="hidden">
            <h2>Loading...</h2>
        </div>

        <!-- Main Menu Screen -->
        <div id="main-menu">
            <h1>Rhythm Pulse</h1>
            <div id="song-selection">
                <h2>Select a Song</h2>
            </div>
            <div id="difficulty-selection" class="hidden">
                 <h2>Select Difficulty</h2>
            </div>
        </div>

        <!-- Results Screen -->
        <div id="results-screen" class="hidden">
            <h2 id="results-title">Song Complete!</h2>
            <div id="results-details">
                <div class="result-label">Score:</div><div class="result-value" id="final-score">0</div>
                <div class="result-label">Max Combo:</div><div class="result-value" id="final-max-combo">0</div>
                <div class="result-label" style="color: var(--perfect-color);">Perfect:</div><div class="result-value" id="final-perfect">0</div>
                <div class="result-label" style="color: var(--good-color);">Good:</div><div class="result-value" id="final-good">0</div>
                <div class="result-label" style="color: var(--miss-color);">Miss:</div><div class="result-value" id="final-miss">0</div>
                <div class="result-label">Rank:</div><div class="result-value" id="final-rank">F</div>
            </div>
            <button id="retry-button" class="menu-button">Retry</button>
            <button id="back-to-menu-button" class="menu-button">Main Menu</button>
        </div>

        <!-- Game Playfield -->
        <div id="playfield" class="hidden">
            <div id="hud">
                <div id="score-display">Score: 0</div>
                <div id="combo-display"></div>
            </div>
            <div id="judgement-display"></div>
            <div class="lane"></div>
            <div class="lane"></div>
            <div class="lane"></div>
            <div class="lane"></div>
            <div id="hit-line"></div>
            <div id="hit-area">
                <button class="hit-button" data-lane="1"></button>
                <button class="hit-button" data-lane="2"></button>
                <button class="hit-button" data-lane="3"></button>
                <button class="hit-button" data-lane="4"></button>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // --- DOM Elements ---
            const gameContainer = document.getElementById('game-container');
            const playfield = document.getElementById('playfield');
            const hitLine = document.getElementById('hit-line');
            const hitButtons = document.querySelectorAll('.hit-button');
            const scoreDisplay = document.getElementById('score-display');
            const comboDisplay = document.getElementById('combo-display');
            const judgementDisplay = document.getElementById('judgement-display');
            
            const mainMenu = document.getElementById('main-menu');
            const songSelection = document.getElementById('song-selection');
            const difficultySelection = document.getElementById('difficulty-selection');
            const loadingScreen = document.getElementById('loading-screen');
            
            const resultsScreen = document.getElementById('results-screen');
            const retryButton = document.getElementById('retry-button');
            const backToMenuButton = document.getElementById('back-to-menu-button');

            // --- Game State ---
            let score = 0, combo = 0, maxCombo = 0;
            let judgements = { perfect: 0, good: 0, miss: 0 };
            let notes = [];
            let heldNotes = [null, null, null, null]; // For long notes, indexed by lane-1
            let noteSpeed = 3; // pixels per frame at 60fps
            let currentSong, currentBeatmap, currentDifficulty;
            let audioPlayer, gameLoopId;
            let isPlaying = false;
            
            // --- Timing Windows (in seconds) ---
            const timing = { perfect: 0.05, good: 0.1, };

            // --- Songs & Beatmaps ---
            const songs = [
                {
                    title: "Synthwave Dream",
                    artist: "Gemini",
                    bpm: 120,
                    url: 'https://cdn.jsdelivr.net/gh/huckbit/resources/rhythm-game/synthwave-dream.mp3',
                    beatmaps: {
                        easy: generateSimpleBeatmap(120, 60, 1),
                        medium: generateSimpleBeatmap(120, 60, 2),
                        hard: [ // Hand-crafted map
                            { time: 1, lane: 1 }, { time: 1.5, lane: 2 }, { time: 2, lane: 3 }, { time: 2.5, lane: 4 },
                            { time: 3, lane: 1, duration: 1 }, { time: 3, lane: 4, duration: 1 },
                            { time: 4.5, lane: 2 }, { time: 5, lane: 3 }, { time: 5.5, lane: 1 }, { time: 6, lane: 4 },
                            { time: 6.5, lane: 2 }, { time: 6.75, lane: 3 }, { time: 7, lane: 1 }, { time: 7.25, lane: 4 },
                            { time: 8, lane: 2, duration: 1.5 }, { time: 8.5, lane: 3, duration: 1.5 },
                            { time: 10.5, lane: 1 }, { time: 10.5, lane: 4 }, { time: 11, lane: 2 }, { time: 11, lane: 3 },
                            { time: 11.5, lane: 1 }, { time: 11.5, lane: 4 }, { time: 12, lane: 1 }, { time: 12.25, lane: 2 }, { time: 12.5, lane: 3 }, { time: 12.75, lane: 4 },
                            { time: 13, lane: 1 }, { time: 13.25, lane: 2 }, { time: 13.5, lane: 3 }, { time: 13.75, lane: 4 },
                            { time: 14, lane: 1, duration: 2 }, { time: 14.5, lane: 2 }, { time: 15, lane: 3 }, { time: 15.5, lane: 4 },
                        ]
                    }
                },
                {
                    title: "Electro Pulse",
                    artist: "Gemini",
                    bpm: 140,
                    url: 'https://cdn.jsdelivr.net/gh/huckbit/resources/rhythm-game/electro-pulse.mp3',
                    beatmaps: {
                        easy: generateSimpleBeatmap(140, 55, 1),
                        medium: generateSimpleBeatmap(140, 55, 2),
                        hard: generateSimpleBeatmap(140, 55, 3, true)
                    }
                }
            ];
            
            function generateSimpleBeatmap(bpm, duration, complexity = 1, allowLongs = false) {
                const map = [];
                const beatInterval = 60 / bpm;
                const totalBeats = Math.floor(duration / beatInterval);
                for (let i = 0; i < totalBeats; i++) {
                    if (Math.random() < 0.4 * complexity) {
                        const lane = Math.floor(Math.random() * 4) + 1;
                        const note = { time: i * beatInterval, lane: lane };
                        if (allowLongs && Math.random() < 0.1 * complexity) {
                            note.duration = beatInterval * (Math.floor(Math.random() * 2) + 1);
                        }
                        map.push(note);
                    }
                }
                return map;
            }

            function init() {
                setupMainMenu();
                setupInputListeners();
            }

            function setupMainMenu() {
                songSelection.innerHTML = '<h2>Select a Song</h2>';
                songs.forEach((song, index) => {
                    const songEl = document.createElement('button');
                    songEl.classList.add('song-item');
                    songEl.textContent = `${song.title} - ${song.artist}`;
                    songEl.onclick = () => selectSong(index);
                    songSelection.appendChild(songEl);
                });
                songSelection.classList.remove('hidden');
                difficultySelection.classList.add('hidden');
                mainMenu.classList.remove('hidden');
                playfield.classList.add('hidden');
                resultsScreen.classList.add('hidden');
            }

            function selectSong(songIndex) {
                currentSong = songs[songIndex];
                songSelection.classList.add('hidden');
                difficultySelection.innerHTML = `<h2>${currentSong.title}</h2>`;
                Object.keys(currentSong.beatmaps).forEach(diff => {
                    const diffBtn = document.createElement('button');
                    diffBtn.classList.add('difficulty-button');
                    diffBtn.textContent = diff.charAt(0).toUpperCase() + diff.slice(1);
                    diffBtn.onclick = () => { currentDifficulty = diff; startGame(); };
                    difficultySelection.appendChild(diffBtn);
                });
                difficultySelection.classList.remove('hidden');
            }

            async function startGame() {
                await Tone.start();
                resetGameState();
                mainMenu.classList.add('hidden');
                loadingScreen.classList.remove('hidden');
                currentBeatmap = JSON.parse(JSON.stringify(currentSong.beatmaps[currentDifficulty]));
                
                audioPlayer = new Tone.Player(currentSong.url, () => {
                    loadingScreen.classList.add('hidden');
                    playfield.classList.remove('hidden');
                    const noteTravelTime = (playfield.clientHeight * 0.85) / noteSpeed / 60;
                    
                    currentBeatmap.forEach(noteData => {
                        Tone.Transport.scheduleOnce(time => {
                            spawnNote(noteData, time);
                        }, noteData.time - noteTravelTime);
                    });
                    
                    Tone.Transport.scheduleOnce(() => endGame(), audioPlayer.buffer.duration);
                    Tone.Transport.bpm.value = currentSong.bpm;
                    Tone.Transport.start();
                    audioPlayer.start();
                    isPlaying = true;
                    gameLoopId = requestAnimationFrame(gameLoop);
                }).toDestination();
            }
            
            function resetGameState() {
                score = 0; combo = 0; maxCombo = 0;
                judgements = { perfect: 0, good: 0, miss: 0 };
                isPlaying = false;
                heldNotes = [null, null, null, null];
                document.querySelectorAll('.note, .note-trail').forEach(n => n.remove());
                notes = [];
                updateScoreDisplay();
                updateComboDisplay();
                if (Tone.Transport.state === 'started') {
                    Tone.Transport.stop();
                    Tone.Transport.cancel();
                }
                if (audioPlayer) audioPlayer.dispose();
            }

            function spawnNote(noteData, scheduledTime) {
                const noteEl = document.createElement('div');
                noteEl.classList.add('note', `lane${noteData.lane}`);
                playfield.appendChild(noteEl);

                const note = {
                    element: noteEl,
                    lane: noteData.lane,
                    time: scheduledTime,
                    duration: noteData.duration || 0,
                    isHit: false,
                    isLongNoteHeld: false,
                    trailElement: null
                };

                if (note.duration > 0) {
                    const trailEl = document.createElement('div');
                    trailEl.classList.add('note-trail', `lane${noteData.lane}`);
                    playfield.insertBefore(trailEl, noteEl);
                    note.trailElement = trailEl;
                }
                notes.push(note);
            }

            function gameLoop() {
                if (!isPlaying) return;
                const hitLineY = playfield.clientHeight * 0.85;
                const currentTime = Tone.now();
                const noteTravelTime = (playfield.clientHeight * 0.85) / noteSpeed / 60;
                const pixelsPerSecond = hitLineY / noteTravelTime;

                for (let i = notes.length - 1; i >= 0; i--) {
                    const note = notes[i];
                    if (note.isHit && !note.isLongNoteHeld) continue;

                    const timeSinceScheduled = currentTime - note.time;
                    const newY = timeSinceScheduled * pixelsPerSecond;
                    
                    if (note.isLongNoteHeld) { // Update trail for held note
                        const trailTop = newY;
                        const trailBottom = hitLineY;
                        note.trailElement.style.transform = `translateY(${trailTop}px) scaleY(${(trailBottom - trailTop) / note.trailElement.clientHeight})`;
                    } else { // Move note and trail
                        note.element.style.transform = `translateY(${newY}px)`;
                        if (note.trailElement) {
                            const trailLength = note.duration * pixelsPerSecond;
                            note.trailElement.style.height = `${trailLength}px`;
                            note.trailElement.style.transform = `translateY(${newY}px)`;
                        }
                    }

                    // Check for miss
                    const missTime = note.time + timing.good;
                    if (currentTime > missTime && !note.isHit) {
                        handleJudgement('miss');
                        note.isHit = true; // Mark as processed
                        note.element.style.opacity = '0.3';
                        if (note.trailElement) note.trailElement.style.opacity = '0.3';
                        setTimeout(() => {
                            note.element.remove();
                            if (note.trailElement) note.trailElement.remove();
                        }, 200);
                        notes.splice(i, 1);
                    }
                }
                
                const beatProgress = Tone.Transport.progress * (currentSong.bpm / 60);
                const scale = 1 + (Math.sin(beatProgress * Math.PI * 2) * 0.05);
                hitLine.style.transform = `scaleX(${scale})`;

                gameLoopId = requestAnimationFrame(gameLoop);
            }

            function setupInputListeners() {
                hitButtons.forEach(button => {
                    const lane = parseInt(button.dataset.lane);
                    const handlePress = () => {
                        button.classList.add('active');
                        handleHit(lane, 'down');
                    };
                    const handleRelease = () => {
                        button.classList.remove('active');
                        handleHit(lane, 'up');
                    };
                    button.addEventListener('mousedown', handlePress);
                    button.addEventListener('mouseup', handleRelease);
                    button.addEventListener('mouseleave', handleRelease);
                    button.addEventListener('touchstart', (e) => { e.preventDefault(); handlePress(); });
                    button.addEventListener('touchend', (e) => { e.preventDefault(); handleRelease(); });
                });

                document.addEventListener('keydown', (e) => {
                    let lane = 0;
                    switch(e.key.toLowerCase()) {
                        case 'd': lane = 1; break; case 'f': lane = 2; break;
                        case 'j': lane = 3; break; case 'k': lane = 4; break;
                    }
                    if (lane > 0 && !e.repeat) {
                        hitButtons[lane-1].classList.add('active');
                        handleHit(lane, 'down');
                    }
                });
                document.addEventListener('keyup', (e) => {
                     let lane = 0;
                    switch(e.key.toLowerCase()) {
                        case 'd': lane = 1; break; case 'f': lane = 2; break;
                        case 'j': lane = 3; break; case 'k': lane = 4; break;
                    }
                    if (lane > 0) {
                        hitButtons[lane-1].classList.remove('active');
                        handleHit(lane, 'up');
                    }
                });
                
                retryButton.onclick = () => { resultsScreen.classList.add('hidden'); startGame(); };
                backToMenuButton.onclick = () => { resultsScreen.classList.add('hidden'); setupMainMenu(); };
            }

            function handleHit(lane, type) {
                if (!isPlaying) return;
                const currentTime = Tone.now();

                if (type === 'down') {
                    let closestNote = null, minTimeDiff = Infinity;
                    for (const note of notes) {
                        if (note.lane === lane && !note.isHit) {
                            const timeDiff = Math.abs(currentTime - note.time);
                            if (timeDiff < minTimeDiff) {
                                minTimeDiff = timeDiff;
                                closestNote = note;
                            }
                        }
                    }

                    if (closestNote && minTimeDiff <= timing.good) {
                        const judgement = minTimeDiff <= timing.perfect ? 'perfect' : 'good';
                        if (closestNote.duration > 0) { // It's a long note
                            closestNote.isLongNoteHeld = true;
                            heldNotes[lane - 1] = closestNote;
                            closestNote.element.style.display = 'none'; // Hide head
                        } else { // It's a tap note
                            closestNote.isHit = true;
                            closestNote.element.remove();
                        }
                        handleJudgement(judgement, closestNote);
                    }
                } else { // type === 'up'
                    const heldNote = heldNotes[lane - 1];
                    if (heldNote) {
                        const endTime = heldNote.time + heldNote.duration;
                        const releaseDiff = Math.abs(currentTime - endTime);
                        const judgement = releaseDiff <= timing.perfect ? 'perfect' : 'good';
                        handleJudgement(judgement); // Score the release
                        heldNote.trailElement.remove();
                        heldNote.isHit = true;
                        heldNote.isLongNoteHeld = false;
                        heldNotes[lane - 1] = null;
                    }
                }
            }

            function handleJudgement(type, note = null) {
                if (type === 'miss') {
                    combo = 0;
                    judgements.miss++;
                    showJudgementText('MISS', varToHex('--miss-color'));
                } else {
                    combo++;
                    if (combo > maxCombo) maxCombo = combo;
                    
                    if (type === 'perfect') {
                        score += 300;
                        judgements.perfect++;
                        showJudgementText('PERFECT', varToHex('--perfect-color'));
                    } else {
                        score += 100;
                        judgements.good++;
                        showJudgementText('GOOD', varToHex('--good-color'));
                    }
                    
                    if (note) createHitParticles(note.lane);
                }
                updateScoreDisplay();
                updateComboDisplay();
            }

            function updateScoreDisplay() {
                scoreDisplay.textContent = `Score: ${score.toString().padStart(7, '0')}`;
                scoreDisplay.style.transform = 'scale(1.1)';
                setTimeout(() => scoreDisplay.style.transform = 'scale(1)', 100);
            }

            function updateComboDisplay() {
                comboDisplay.textContent = combo > 2 ? `${combo} COMBO` : '';
                if (combo > 2) {
                    comboDisplay.style.transform = 'scale(1.1)';
                    setTimeout(() => comboDisplay.style.transform = 'scale(1)', 100);
                }
            }
            
            function showJudgementText(text, color) {
                judgementDisplay.textContent = text;
                judgementDisplay.style.color = color;
                judgementDisplay.style.opacity = 1;
                judgementDisplay.style.transform = 'translateX(-50%) scale(1.2)';
                setTimeout(() => {
                    judgementDisplay.style.opacity = 0;
                    judgementDisplay.style.transform = 'translateX(-50%) scale(1)';
                }, 300);
            }

            function createHitParticles(lane) {
                const rect = hitButtons[lane - 1].getBoundingClientRect();
                const centerX = rect.left + rect.width / 2;
                const centerY = playfield.clientHeight * 0.85;

                for (let i = 0; i < 15; i++) {
                    const p = document.createElement('div');
                    p.classList.add('particle');
                    playfield.appendChild(p);
                    const angle = Math.random() * Math.PI, life = Math.random() * 0.5 + 0.3;
                    const velocity = Math.random() * 6 + 3;
                    const color = getComputedStyle(document.documentElement).getPropertyValue(`--note-color-${lane}`);
                    p.style.backgroundColor = color;
                    p.style.width = p.style.height = `${Math.random() * 5 + 2}px`;
                    p.style.left = `${centerX}px`, p.style.top = `${centerY}px`;
                    
                    let x = 0, y = 0, vx = Math.cos(angle) * velocity, vy = -Math.sin(angle) * velocity;
                    let startTime = performance.now();
                    function animateParticle() {
                        let elapsed = (performance.now() - startTime) / 1000;
                        if (elapsed > life) { p.remove(); return; }
                        x += vx; y += vy; vy += 0.2; // gravity
                        p.style.opacity = 1 - (elapsed / life);
                        p.style.transform = `translate(${x}px, ${y}px)`;
                        requestAnimationFrame(animateParticle);
                    }
                    animateParticle();
                }
            }

            function endGame() {
                isPlaying = false;
                cancelAnimationFrame(gameLoopId);
                notes.forEach(note => { if (!note.isHit) judgements.miss++; });
                heldNotes.forEach(note => { if(note) judgements.miss++; }); // Miss any holds not released
                setTimeout(showResultsScreen, 1500);
            }

            function showResultsScreen() {
                playfield.classList.add('hidden');
                resultsScreen.classList.remove('hidden');

                const totalNotes = judgements.perfect + judgements.good + judgements.miss;
                const accuracy = totalNotes > 0 ? (judgements.perfect + judgements.good*0.5) / totalNotes : 0;
                let rank = 'F';
                if (accuracy >= 0.98 && judgements.miss === 0) rank = 'S';
                else if (accuracy >= 0.95) rank = 'A';
                else if (accuracy >= 0.9) rank = 'B';
                else if (accuracy >= 0.8) rank = 'C';
                else if (accuracy >= 0.7) rank = 'D';

                document.getElementById('final-score').textContent = score;
                document.getElementById('final-max-combo').textContent = maxCombo;
                document.getElementById('final-perfect').textContent = judgements.perfect;
                document.getElementById('final-good').textContent = judgements.good;
                document.getElementById('final-miss').textContent = judgements.miss;
                document.getElementById('final-rank').textContent = rank;
                document.getElementById('results-title').textContent = `${currentSong.title} - Complete!`;
            }

            function varToHex(varName) {
                return getComputedStyle(document.documentElement).getPropertyValue(varName).trim();
            }

            init();
        });
    </script>
</body>
</html>

